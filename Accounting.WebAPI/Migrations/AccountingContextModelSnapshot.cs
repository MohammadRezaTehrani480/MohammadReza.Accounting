// <auto-generated />
using System;
using Accounting.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Accounting.WebAPI.Migrations
{
    [DbContext(typeof(AccountingContext))]
    partial class AccountingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Accounting.WebAPI.Entities.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Cash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CashName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RealPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RealPersonId");

                    b.ToTable("Cashes");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CashId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocNo")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LookupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LookupTypeId = 1,
                            Title = "withdrawal"
                        },
                        new
                        {
                            Id = 2,
                            LookupTypeId = 1,
                            Title = "Payment"
                        },
                        new
                        {
                            Id = 3,
                            LookupTypeId = 2,
                            Title = "Iranian"
                        },
                        new
                        {
                            Id = 4,
                            LookupTypeId = 2,
                            Title = "Foreigner"
                        },
                        new
                        {
                            Id = 5,
                            LookupTypeId = 3,
                            Title = "Tehran"
                        },
                        new
                        {
                            Id = 6,
                            LookupTypeId = 3,
                            Title = "Karaj"
                        },
                        new
                        {
                            Id = 7,
                            LookupTypeId = 3,
                            Title = "Shiraz"
                        },
                        new
                        {
                            Id = 8,
                            LookupTypeId = 3,
                            Title = "Gilan"
                        });
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "5fb40604-a4e4-4b2e-aebe-f87bd23e3206",
                            ConcurrencyStamp = "5bed8d6c-61e9-4c92-b7c0-d50759535c20",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "bf49eaf4-d0e8-4aef-9f9d-23396c15f661",
                            ConcurrencyStamp = "11a6ff21-5197-46aa-902a-91197df5cd97",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.LegalPerson", b =>
                {
                    b.HasBaseType("Accounting.WebAPI.Entities.Person");

                    b.Property<string>("CompanyNo")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("EconomicCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("RegistrationCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasDiscriminator().HasValue("LegalPerson");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.RealPerson", b =>
                {
                    b.HasBaseType("Accounting.WebAPI.Entities.Person");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BirthPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NationalityId1")
                        .HasColumnType("int");

                    b.HasIndex("NationalityId");

                    b.HasIndex("NationalityId1");

                    b.HasDiscriminator().HasValue("RealPerson");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Karaj",
                            Email = "tehranimohammad480",
                            PhoneNumber = "09177973283",
                            Age = 10,
                            BirthDate = new DateTime(1997, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 6,
                            FatherName = "Ali",
                            FirstName = "Mohammad Reza",
                            LastName = "Tehrani",
                            NationalCode = "0440799996",
                            NationalityId = 3
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tehran",
                            Email = "tehraniAli480",
                            PhoneNumber = "09171619993",
                            Age = 20,
                            BirthDate = new DateTime(1985, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 5,
                            FatherName = "Kamal",
                            FirstName = "Ali",
                            LastName = "Tehrani",
                            NationalCode = "1234567890",
                            NationalityId = 3
                        },
                        new
                        {
                            Id = 3,
                            Address = "Abadan",
                            Email = "sdlksdkvnksnv",
                            PhoneNumber = "09174856699",
                            Age = 15,
                            BirthDate = new DateTime(1997, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 5,
                            FatherName = "Ali",
                            FirstName = "Reza",
                            LastName = "Bogari",
                            NationalCode = "0440799996",
                            NationalityId = 3
                        },
                        new
                        {
                            Id = 4,
                            Address = "Tehran",
                            Email = "tehraniAli480",
                            PhoneNumber = "01478747879",
                            Age = 47,
                            BirthDate = new DateTime(1985, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 6,
                            FatherName = "Kamal",
                            FirstName = "Mahyar",
                            LastName = "Bogari",
                            NationalCode = "2546845865",
                            NationalityId = 3
                        },
                        new
                        {
                            Id = 5,
                            Address = "Karaj",
                            Email = "tehranimohammad480",
                            PhoneNumber = "01478954789",
                            Age = 14,
                            BirthDate = new DateTime(1997, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            FatherName = "Ali",
                            FirstName = "Mohammad Reza",
                            LastName = "Tehrani",
                            NationalCode = "147569874",
                            NationalityId = 3
                        },
                        new
                        {
                            Id = 6,
                            Address = "Tehran",
                            Email = "rggrg",
                            PhoneNumber = "01236987474",
                            Age = 12,
                            BirthDate = new DateTime(1985, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 8,
                            FatherName = "Kamal",
                            FirstName = "Ali",
                            LastName = "Tehrani",
                            NationalCode = "9898989745",
                            NationalityId = 3
                        },
                        new
                        {
                            Id = 7,
                            Address = "Karaj",
                            Email = "tehranimohammad480",
                            PhoneNumber = "01478745454",
                            Age = 45,
                            BirthDate = new DateTime(1997, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 5,
                            FatherName = "Ali",
                            FirstName = "Ahmad Reza",
                            LastName = "Tehrani",
                            NationalCode = "4565654568",
                            NationalityId = 3
                        },
                        new
                        {
                            Id = 8,
                            Address = "Tehran",
                            Email = "tehraniAli480",
                            PhoneNumber = "09171619993",
                            Age = 20,
                            BirthDate = new DateTime(1985, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 6,
                            FatherName = "Kamal",
                            FirstName = "Ali",
                            LastName = "Tehrani",
                            NationalCode = "1234567890",
                            NationalityId = 3
                        },
                        new
                        {
                            Id = 9,
                            Address = "Karaj",
                            Email = "djjfgodf",
                            PhoneNumber = "01478954758",
                            Age = 25,
                            BirthDate = new DateTime(1788, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 7,
                            FatherName = "Parsa",
                            FirstName = "Mohammad Ali",
                            LastName = "Tehrani",
                            NationalCode = "1578947524",
                            NationalityId = 4
                        },
                        new
                        {
                            Id = 10,
                            Address = "Tehran",
                            Email = "tehraniAli480",
                            PhoneNumber = "09171619993",
                            Age = 16,
                            BirthDate = new DateTime(1975, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = 8,
                            FatherName = "Akbar",
                            FirstName = "Asghar",
                            LastName = "Bogari",
                            NationalCode = "1475369514",
                            NationalityId = 4
                        });
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Cash", b =>
                {
                    b.HasOne("Accounting.WebAPI.Entities.RealPerson", "RealPerson")
                        .WithMany("Cashes")
                        .HasForeignKey("RealPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealPerson");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Document", b =>
                {
                    b.HasOne("Accounting.WebAPI.Entities.Cash", "Cash")
                        .WithMany("Documents")
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Accounting.WebAPI.Entities.Lookup", "DocType")
                        .WithMany("Documents")
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Accounting.WebAPI.Entities.Person", "Person")
                        .WithMany("Documents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cash");

                    b.Navigation("DocType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Accounting.WebAPI.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Accounting.WebAPI.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.WebAPI.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Accounting.WebAPI.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.RealPerson", b =>
                {
                    b.HasOne("Accounting.WebAPI.Entities.Lookup", "BirthPlace")
                        .WithMany("RealPeople")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Accounting.WebAPI.Entities.Lookup", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId1");

                    b.Navigation("BirthPlace");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Cash", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Lookup", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("RealPeople");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.Person", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Accounting.WebAPI.Entities.RealPerson", b =>
                {
                    b.Navigation("Cashes");
                });
#pragma warning restore 612, 618
        }
    }
}
